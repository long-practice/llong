# 1이 될 때 까지

# 해결방법
# N에서 1을 빼는 것보다 N을 K로 나누는 것이 N의 값을 줄이는데 효과적인 것을 이용
# N이 1이 아닐 때 까지 나눌 조건이 갖추어지게 된다면 즉시 나누기
# 이 외에 상황에는 1을 빼주기

# 예시
# N = 25, K = 5
# 25는 5로 나눌 수 있으므로 1회 연산에 N = 5
# 5또한 5로 나눌 수 있으므로 2회 연산에 N = 1 따라서 답은 2

# N = 17, K = 4
# 17은 4로 나눌 수 없으므로 1회 연산에 N = 16
# 16은 4로 나눌 수 있음(N = 4), 4또한 4로 나눌 수 있으므로 3회 연산에 N = 1 따라서 답은 3

# 풀이
# N, K값 저장
N, K = map(int, input().split(' '))

answer = 0

# N의 값이 1이 아닐동안(1보다 클 동안)
# 나누기 조건 우선적 확인
# 1회 연산 후 정답 변수에 1 더하기

# (추가)
# K 값이 매우 클 경우를 대비
# 매 순간 1을 빼는 연산을 하게 되면 연산의 양이 대폭 증가할 수 있으므로
# 1을 빼는 연산은 N을 K로 나누었을 때 나머지만큼 수행하므로 answer += N % K 성립
while N > 1:
    if N % K == 0:
        answer += 1
        N //= K
    else:
        answer += N % K
        N -= N % K
print(answer)